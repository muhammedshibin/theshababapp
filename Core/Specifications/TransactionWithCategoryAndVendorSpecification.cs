using System;
using System.Linq.Expressions;
using Core.DataFilters;
using Core.Entities;

namespace Core.Specifications
{
    public class TransactionWithCategoryAndVendorSpecification : BaseSpecification<TransactionDetail>
    {
        public TransactionWithCategoryAndVendorSpecification(TransactionsFilter filter, bool forCount = false) :
            base(txn =>
                (!filter.Month.HasValue || txn.TransactionDate.Month == filter.Month) &&
                (!filter.Year.HasValue || txn.TransactionDate.Year == filter.Year) &&
                (!filter.PaidBy.HasValue || txn.PaidPartyId == filter.PaidBy) &&
                (!filter.PaidTo.HasValue || txn.PaidToId == filter.PaidTo) &&
                (filter.IsAutoGeneratedTxnsNeeded || !txn.IsAutoGenerated ) &&
                (string.IsNullOrEmpty(filter.Search) || txn.Name.ToLower().Contains(filter.Search)) &&
                (string.IsNullOrEmpty(filter.CategoryName) || txn.Category.Name.ToLower().Contains(filter.CategoryName))
            )
        {
            if (!forCount)
            {
                AddInclude(t => t.Category);
                AddInclude(t => t.PaidParty);
                AddOrderByDesc(t => t.TransactionDate);
                if (!string.IsNullOrEmpty(filter.Sort))
                {
                    switch (filter.Sort.ToLower())
                    {
                        case "categoryasc":
                            AddOrderBy(x => x.Category.Name);
                            break;
                        case "categorydesc":
                            AddOrderByDesc(x => x.Category.Name);
                            break;
                        case "amountasc":
                            AddOrderBy(x => x.Amount);
                            break;
                        case "amountdesc":
                            AddOrderByDesc(x => x.Amount);
                            break;
                        case "txndateasc":
                            AddOrderBy(x => x.TransactionDate);
                            break;
                        case "namedesc":
                            AddOrderByDesc(x => x.Name);
                            break;
                        case "nameasc":
                            AddOrderBy(x => x.Name);
                            break;
                        default:
                            AddOrderByDesc(x => x.TransactionDate);
                            break;
                    }
                }
                AddPagination((filter.PageIndex - 1) * filter.PageSize, filter.PageSize);
            }
        }

        public TransactionWithCategoryAndVendorSpecification(int id) :
            base(t => t.Id == id)
        {
            AddInclude(t => t.Category);
            AddInclude(t => t.PaidParty);            
        }

    }
}